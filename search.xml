<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Allen&#39;s study Blog</title>
    <url>/2024/02/08/title/</url>
    <content><![CDATA[<p>Welcome to my Blog! </p>
]]></content>
  </entry>
  <entry>
    <title>leetcode01</title>
    <url>/2024/02/08/leetcode01/</url>
    <content><![CDATA[<h2 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h2><p>pre-conditions: no duplicate numbers in the array.<br>Define intervals, the common ones are [left,right] or [left,right).<br>runtime complexity : O(logn)</p>
<ol>
<li>we define the interval [left, right] which means if the middle is not equal to the target, it can’t be included in next interval. Because our interval [left, right] means the target can be left or right. And if the left is greater than right we break the loop. </li>
<li>we define the interval [left, right) which means if the middle is greater than the target, the next interval’s right will update to middle and if the middle is smaller than the target, the next interval’s left will update to middle + 1.If left &#x3D;&#x3D; right we will break the loop. Because our interval [left, right) means the target can be left but right.</li>
</ol>
<h3 id="leetcode-35"><a href="#leetcode-35" class="headerlink" title="leetcode 35"></a>leetcode 35</h3><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>keyword : distinct.</p>
<p>reasoning:<br>So we use binary search to solve this problem and define the interval [left, right). If we find the target we return the index as normal binary search. If we do not find the target the interval must be left &#x3D;&#x3D; right. We return the right at this situation because the right one is greater than the target so the target can insert at this position.</p>
<pre><code>def searchInsert(self, nums: List[int], target: int) -&gt; int:
    &quot;binary search&quot;
    left = 0 
    right = len(nums)
    while(left &lt; right):
        middle = int((left + right)/2)
        if(nums[middle] &lt; target):
            left = middle + 1
        elif(nums[middle] &gt; target):
            right = middle
        else:
            return middle
    return right
</code></pre>
<h3 id="leetcode-34"><a href="#leetcode-34" class="headerlink" title="leetcode 34"></a>leetcode 34</h3><p>Given an array of integers sorted in non-decreasing order, find the starting and ending position of a given value.numstarget</p>
<p>If is not found in the array, return .target[-1, -1]</p>
<p>You must write an algorithm with  runtime complexity.O(log n)</p>
<p>reasoning:<br>This question ask us to find the target value’s first position and last position. Although the array is non-decreasing and duplicate we can use binary search to find the position, but we need to some change. Firstly, we want to find the starting position, using the binary search but when we find the target value we update the interval to the[0, middle - 1] which means we will do the binary search in the next interval to find the starting position. We run this process until we can not find anything. Secondly, we do the same to find the ending position.</p>
<pre><code>def searchRange(self, nums: List[int], target: int) -&gt; List[int]:
    &#39;binary search&#39;
    left = 0
    right = len(nums) - 1
    pos = [-1,-1]
    while(left &lt;= right):
        middle = int((right + left) / 2)
        if(nums[middle] &lt; target):
            left = middle + 1
        elif(nums[middle] &gt; target):
            right = middle - 1
        else:
            pos[1] = middle
            left = middle + 1
            right = len(nums) - 1

    left = 0
    right = len(nums) - 1

    while(left &lt;= right):
        middle = int((right + left) / 2)
        if(nums[middle] &lt; target):
            left = middle + 1
        elif(nums[middle] &gt; target):
            right = middle - 1
        else:
            pos[0] = middle
            left = 0
            right = middle - 1       
            
    return pos
</code></pre>
<h3 id="leetcode-34-1"><a href="#leetcode-34-1" class="headerlink" title="leetcode 34"></a>leetcode 34</h3><p>Given a non-negative integer , return the square root of rounded down to the nearest integer. The returned integer should be non-negative as well.xx</p>
<p>You must not use any built-in exponent function or operator.</p>
<p>For example, do not use in c++ or in python.pow(x, 0.5)x ** 0.5</p>
<p>reasoning: As we all know the number’s square root can not be greater than itself. so the interval [0, x] can be defined. So we can use binary search to find the answer.</p>
<pre><code>def mySqrt(self, x: int) -&gt; int:
    left = 0
    right = x
    while(left &lt;= right):
        middle = int((left + right) / 2)
        if(middle * middle &gt; x):
            right = middle - 1
        elif(middle * middle &lt; x):
            left = middle + 1
        else:
            return middle
    if(middle * middle &gt; x):
        return middle - 1
    else:
        return middle
</code></pre>
<h3 id="leetcode-167"><a href="#leetcode-167" class="headerlink" title="leetcode 167"></a>leetcode 167</h3><p>Given a positive integer num, return if is a perfect square or otherwise.truenumfalse</p>
<p>A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.</p>
<p>You must not use any built-in library function, such as .sqrt</p>
<p>reasoning: the same as leetcode 34.</p>
<pre><code>def isPerfectSquare(self, num: int) -&gt; bool:
    left = 0
    right = num
    while(left &lt;= right):
        middle = int((left + right) / 2)
        if(middle * middle &gt; num):
            right = middle - 1
        elif(middle * middle &lt; num):
            left = middle + 1
        else:
            return True
    return False
</code></pre>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>leetcode02</title>
    <url>/2024/02/13/leetcode02/</url>
    <content><![CDATA[<h3 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h3><p>Sliding Window is the type of double pointers, by adjusting constantly the start and end position of our window to get the final answer. O(n)</p>
<h2 id="leetcode-904-Fruit-Into-Baskets"><a href="#leetcode-904-Fruit-Into-Baskets" class="headerlink" title="leetcode 904. Fruit Into Baskets"></a>leetcode 904. Fruit Into Baskets</h2><p>You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array where is the type of fruit the tree produces.fruitsfruits[i]ith</p>
<p>You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:</p>
<p>You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.<br>Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.<br>Once you reach a tree with fruit that cannot fit in your baskets, you must stop.<br>Given the integer array , return the maximum number of fruits you can pick</p>
<p>reasoning:</p>
<p>There are three questions we need to solve first：</p>
<ol>
<li>What is window in this question?</li>
</ol>
<p>Obviously, the fruits which can be collected on the baskets will be the window </p>
<ol start="2">
<li>How to move the end of the window?</li>
</ol>
<p>By observing the question, we can conclude that only two baskets which means only two distinct number can appear on this window. So the end of window will change when we find some number which is not on the window.<br>3. How to mover the start of the window?</p>
<p>We have known how to move the end of the window, and only two distinct number can appear on this window, So we can make sure that the position (end - 1) must be in the new window and different from the end one. So we put these two numbers to a list and use for loop from end to 0 to find the first number that do not in the list.</p>
<ol start="4">
<li>How to update the result</li>
</ol>
<p>We define that if end - start &#x3D;&#x3D; result and fruits[end] in baskets then result +&#x3D; 1 because, when end - start &#x3D;&#x3D; result, this window must be the best window at this time so if we broaden the window we must update the result the same time. </p>
<pre><code>def totalFruit(self, fruits: List[int]) -&gt; int:
    blanket = []
    start = 0
    result = 0
    for end in range(0, len(fruits)):
        if(fruits[end] not in blanket and len(blanket) &lt; 2):
            blanket.append(fruits[end])
        elif(fruits[end] in blanket and end - start == result):
            result += 1         
        if(fruits[end] not in blanket):
            result = max(result, end - start)                                  
            blanket[0] = fruits[end - 1]
            blanket[1] = fruits[end]
            start = end
            while(fruits[start - 1] in blanket):              
                start -= 1

    if(result == 0 ):
        return len(fruits)
    return result
       
        
     

    
</code></pre>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
  </entry>
</search>
